syntax = "proto3";
package furya.airdrop.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "furya/airdrop/v1beta1/allocation.proto";

option go_package = "github.com/furysport/fury-chain/x/airdrop/types";

// Msg defines the staking Msg service.
service Msg {
    // ClaimAllocation defines a method to claim allocation
    rpc ClaimAllocation(MsgClaimAllocation) returns (MsgClaimAllocationResponse);
    // SetAllocation defines a method to set allocation
    rpc SetAllocation(MsgSetAllocation) returns (MsgSetAllocationResponse);
    // TransferModuleOwnership defines a method to transfer module ownership to other address
    rpc TransferModuleOwnership(MsgTransferModuleOwnership) returns (MsgTransferModuleOwnershipResponse);
    // DepositTokens defines a method to deposit tokens to the module
    rpc DepositTokens(MsgDepositTokens) returns (MsgDepositTokensResponse);
}

// MsgSetAllocation defines an sdk.Msg type that set airdrop allocation
message MsgSetAllocation {
    string sender = 1;
    AirdropAllocation allocation = 2 [(gogoproto.nullable) = false];
}
// MsgSetAllocationResponse defines the Msg/SetAllocation response type.
message MsgSetAllocationResponse {}

// MsgClaimAllocation defines an sdk.Msg type that claims airdrop allocation
message MsgClaimAllocation {
    option (gogoproto.equal) = false;
    option (gogoproto.goproto_getters) = false;

    string address = 1;
    string pub_key = 2;
    string reward_address = 3;
    string signature = 4;
}
  
// MsgClaimAllocationResponse defines the Msg/ClaimAllocation response type.
message MsgClaimAllocationResponse {
}

// MsgSignData defines an arbitrary, general-purpose, off-chain message
message MsgSignData {
    // Signer is the sdk.AccAddress of the message signer
    string signer = 1 [(gogoproto.jsontag) = "signer"];
    // data represents the raw bytes of the content that is signed (text, json, etc)
    bytes data = 2 [(gogoproto.jsontag) = "data"];
}

message MsgTransferModuleOwnership {
  string sender = 1;
  string new_owner = 2;
}
message MsgTransferModuleOwnershipResponse {}

message MsgDepositTokens {
  string sender = 1;
  repeated string amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}
message MsgDepositTokensResponse {}
